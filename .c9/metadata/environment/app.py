{"changed":true,"filter":false,"title":"app.py","tooltip":"/app.py","value":"import os\nfrom flask import Flask, render_template, redirect, request, url_for\nfrom flask_pymongo import PyMongo\nfrom bson.objectid import ObjectId\n\napp = Flask(__name__)\n\napp.config[\"MONGO_DBNAME\"] = \"recipes_app\"\napp.config[\"MONGO_URI\"] = os.environ.get(\"MONGO_URI\")\n\nmongo = PyMongo(app)\n\n@app.route(\"/\")\ndef index():\n    return render_template(\"index.html\")\n\n@app.route(\"/get_recipes\")   \ndef get_recipes():\n    return render_template(\"recipes.html\", recipes = mongo.db.recipes.find().sort(\"category_name\"))\n    \n#\n@app.route(\"/add_recipe\")\ndef add_recipe():\n    return render_template(\"addrecipes.html\", categories=mongo.db.categories.find())\n    \n# Add Recipe - Insert Recipe Function\n@app.route(\"/insert_recipe\", methods=[\"POST\"])\ndef insert_recipe():\n\n    ingredients = request.form.get(\"recipe_ingredients\").splitlines()\n    tools = request.form.get(\"recipe_tools\").splitlines()\n    \n    # Recipe JSON object\n    submission = {\n        \"recipe_name\": request.form.get(\"recipe_name\"),\n        \"category_name\": request.form.get(\"category_name\"),\n        \"recipe_img\": request.form.get(\"recipe_img\"),\n        \"recipe_difficulty\": request.form.get(\"recipe_difficulty\"),\n        \"recipe_ingredients\": ingredients,\n        \"recipe_cooking_time\": request.form.get(\"recipe_cooking_time\"),\n        \"recipe_price\": request.form.get(\"recipe_price\"),\n        \"recipe_tools\": tools,\n        \"recipe_doses\": request.form.get(\"recipe_doses\"),\n        \"recipe_preparation_steps\": request.form.get(\"recipe_preparation_steps\"),\n    }\n    \n    recipes = mongo.db.recipes\n    recipes.insert_one(submission)\n    return redirect(url_for(\"get_recipes\"))\n\n\n# edit recipe - edit recipe function\n@app.route(\"/edit_recipe/<recipe_id>\")\ndef edit_recipe(recipe_id):\n    the_recipe = mongo.db.recipes.find_one({\"_id\" : ObjectId(recipe_id) })\n    all_recipes = mongo.db.categories.find()\n    \n    return render_template(\"editrecipes.html\", recipes = the_recipe, categories = all_recipes)\n \n #update recipe - update recipe function\n@app.route('/update_recipe/<recipe_id>', methods=[\"POST\"])\ndef update_recipe(recipe_id):\n    recipes = mongo.db.recipes\n    \n    ingredients = request.form.get(\"recipe_ingredients\").splitlines()\n    tools = request.form.get(\"recipe_tools\").splitlines()\n    \n    recipes.update( {'_id': ObjectId(recipe_id)},\n    \n    \n    {\n        \"recipe_name\": request.form.get(\"recipe_name\"),\n        \"category_name\": request.form.get(\"category_name\"),\n        \"recipe_img\": request.form.get(\"recipe_img\"),\n        \"recipe_difficulty\": request.form.get(\"recipe_difficulty\"),\n        \"recipe_ingredients\": ingredients,\n        \"recipe_cooking_time\": request.form.get(\"recipe_cooking_time\"),\n        \"recipe_price\": request.form.get(\"recipe_price\"),\n        \"recipe_tools\": tools,\n        \"recipe_doses\": request.form.get(\"recipe_doses\"),\n        \"recipe_preparation_steps\": request.form.get(\"recipe_preparation_steps\"),\n    })\n    return redirect(\"/get_recipes\")\n\n@app.route('/delete_recipe/<recipe_id>')\ndef delete_recipe(recipe_id):\n    mongo.db.recipes.remove({'_id': ObjectId(recipe_id)})\n    return redirect(url_for('get_recipes'))\n\n    \nif __name__==\"__main__\":\n    app.run(host=os.environ.get(\"IP\"),\n        port=int(os.environ.get(\"PORT\")),\n        debug=True)\n        \n        \n\n\n\n","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":20,"column":0},"end":{"row":20,"column":1},"action":"remove","lines":["#"],"id":1}]]},"ace":{"folds":[],"customSyntax":"python","scrolltop":0,"scrollleft":0,"selection":{"start":{"row":47,"column":34},"end":{"row":47,"column":34},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1574807553515}